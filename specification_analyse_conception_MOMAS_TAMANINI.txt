Gestion d'une boutique de vêtements en ligne 

DESCRIPTION DU SUJET:
Nous avons choisis de réaliser un Système de Gestion de Base de Donnée d'un magasin de vêtement en ligne. Ce système de gestion doit pouvoir réaliser les missions suivantes afin de garantir un achat et une livraison correct sur le site de vêtement:

- Gestion des stocks de vêtements  

- Comptes utilisateur (création de compte)

- Gestion des commandes (des vêtements à envoyer et des commandes passées par le client)

- Tri des vêtements par catégorie afin d'améliorer la recherche des vêtements

- Ajout, modification, suppression de vêtements (back office) 

Service :  

- Front office : vente des vêtements / création - connexion compte  

- Back office : gestion des stocks, ajout, modification, suppression des vêtements / gestion des expéditions 


DESCRIPTION TEXTUELLES DES REQUETES DE MISE A JOUR

Nous allons créer des requêtes afin de remplir nos tables de valeurs.
Vous pouvez trouver ci-joins des exemples:

2 requêtes impliquant 1 table:

//Remplir une ligne de la table utilisateur
INSERT INTO utilisateur (id_utilisateur#, nom_utilisateur, prenom_utilisateur, adresse_utilisateur, email_utilisateur) VALUES (1, 'Spears', 'Britney', '65 avenue de Hollywood', 'b.spears@gmail..com');

//Reduction de 10% sur tout les vetements
UPDATE vetement SET prix_vetement =  prix_vetement * 0.90;

//Reduction de 20% sur tout les vetements dont le prix est supérieur à 80€
UPDATE vetement SET prix_vetement =  prix_vetement * 0.80 WHERE prix_vetement >= 80;

2 requêtes impliquant 2 tables:

// Update lorsqu'on passe une commande pour se re-approvisionner
/****************************************/
UPDATE vetement, commande
SET vetement.quantite_vetement = vetement.quantite_vetement + 50,
    commande.quantite_commandee = commande.quantite_commandee - 50
WHERE
    Books.BookID = Orders.BookID
    AND Orders.OrderID = 1002;

UPDATE vetement
SET    prix = prix*0.80
WHERE nom_taille = (SELECT  PRP_ID
                 FROM   T_PROSPECT P
                    JOIN T_CLIENT C 
                         ON C.CLI_NOM = P.PRP_NOM
                        AND C.CLI_PRENOM = P.PRP_PRENOM)
/**********************************/

2 requêtes impliquant plus de 2 tables:


DECRIPTION TEXTUELLES DES REQUETES DE SUPPRESSION

2 requêtes impliquant 1 table:
//Supprimer une ligne de la table vetement (suppression d'un vêtement)
DELETE FROM vetement WHERE id_vetement=1;

//Supprimer la table couleur
DROP TABLE  couleur;

2 requêtes impliquant 2 tables:
// Supprimer toutes les commandes d'un utilisateur
DELETE FROM commande 
	JOIN utilisateur ON utilisateur.id_utilisateur = commande.id_utilisateur 
	WHERE utilisateur.id_utilisateur = 5;

// Supprimer tous les vêtements dont la catégorie est "pantalon"
DELETE FROM vetement
	JOIN categorie ON vetement.id_categorie = categorie.id_categorie
	WHERE categorie.nom_categorie = "pantalon";

2 requêtes impliquant plus de 2 tables:
// Supprimer tous les vêtements dont la catégorie est "t-shirt" et la taille est "XXL"
DELETE FROM vetement
	JOIN categorie ON vetement.id_categorie = categorie.id_categorie
	JOIN taille ON vetement.id_taille = taille.id_taille
	WHERE categorie.nom_categorie = "t-shirt" AND taille.nom_taille = "XXL";

// Supprimer les commandes d'un utilisateur contenant plus de 5 vêtements rouges
DELETE FROM commande
	JOIN est_commandé ON commande.id_commande = est_commandé.id_commande
	JOIN vetement ON est_commandé.id_vetement = vetement.id_vetement
	JOIN couleur ON vetement.id_couleur = couleur.id_couleur
	WHERE COUNT(est_commandé.id_vetement) > 5 AND couleur.nom = "rouge";

DESCRIPTION TEXTUELLES DES REQUETES DE CONSULTATION

5 requêtes impliquant 1 table dont 1 avec un group By et une avec un Order By:
//Trier les vêtements par ordre croissant du prix
SELECT nom, prix FROM vetement ORDER BY prix; 

//Proposer des publicités selon la journée saint de la personne
SELECT adresse, nom, prenom FROM utilisateur GROUP BY prenom;

//Filtrer par gamme de prix les vêtements 
SELECT prix, nom_vetement FORM vetement WHERE prix BETWEEN 20 AND 40;

//Lister les vêtements dont le prix est inférieur à 30€.
SELECT prix, nom_vetement FROM vetement WHERE prix <31;

//Lister les vêtements dont le prix est égale à 30€.
SELECT prix, nom_vetement FROM vetement WHERE prix = 30;


5 requêtes impliquant 2 tables:
// Trier les vêtements par la couleur rouge
SELECT nom_vetement, prix_vetement, quantite_vetement, nom_couleur 

// Trier les vêtements par catégorie

5 requêtes impliquant plus de 2 tables:


DICTIONNAIRE DE DONNEES MERISE

description textuelles des associations

Nous avons 6 tables dans notre SGBD eshop. Parmis cela, nous avons la table vêtement qui contient les noms, id, descriptions, prix et quantité du vêtement. 
Ces vêtements sont choisis par un utilisateur. Nous avons donc une association Utilisateur -- Choisit -- vetement.
Un utilisateur peut choisir entre 0 à n vêtements.

L'utilisateur, après avoir choisi ses vetements, peut passer une ou plusieurs commandes.

Les vêtements ont aussi des caractéristiques telles qu'une categorie, une taille, une couleur. Nous avons définis pour optimiser la recherche sur le SGBD 1 catégorie, 1 taille et 1 couleur pour 1 vetement.
Une categorie peut avoir plusieurs tailles, de même que plusieurs couleurs. La visualisation des couleurs de vêtement pourra se faire que lorsqu'on filtre les vetements par catégorie ou lorsqu'on applique aucun filtre. Nous partons du principe que pour chercher un vetement d'une certaine taille, il faut chercher par categorie de vêtement.

Si il n'y a plus de vêtements en stock dans la table vetement (caractérisé par son attribut quantite_vetement), des vetements sont commandés pour reapprovisionner le stock.

