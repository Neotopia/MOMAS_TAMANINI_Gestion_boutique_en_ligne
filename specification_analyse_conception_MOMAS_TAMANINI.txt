Gestion d'une boutique de vêtements en ligne 

//Remplir une ligne de la table utilisateur
INSERT INTO utilisateur (id_utilisateur#, nom_utilisateur, prenom_utilisateur, adresse_utilisateur, email_utilisateur) VALUES (1, 'Spears', 'Britney', '65 avenue de Hollywood', 'b.spears@gmail..com');

DESCRIPTION DU SUJET:
Nous avons choisis de réaliser un Système de Gestion de Base de Donnée d'un magasin de vêtement en ligne. Ce système de gestion doit pouvoir réaliser les missions suivantes afin de garantir un achat et une livraison correct sur le site de vêtement:


- Comptes utilisateur (création de compte)

- Gestion des commandes (passées par le client)

- Tri des vêtements par catégorie afin d'améliorer la recherche des vêtements

- Ajout, modification, suppression de vêtements (back office) 

Service :  

- Front office : vente des vêtements / création - connexion compte  

- Back office : ajout, modification, suppression des vêtements / gestion des expéditions 


DESCRIPTION TEXTUELLES DES REQUETES DE MISE A JOUR

Nous allons créer des requêtes afin de remplir nos tables de valeurs.
Vous pouvez trouver ci-joins des exemples:

2 requêtes impliquant 1 table:

//Reduction de 10% sur tout les vetements
UPDATE vetement SET prix_vetement =  prix_vetement * 0.90;

//Reduction de 20% sur tout les vetements dont le prix est supérieur à 80€
UPDATE vetement SET prix_vetement =  prix_vetement * 0.80 WHERE prix_vetement >= 80;

2 requêtes impliquant 2 tables:

//Reduction de 20% sur tous les vetements dont la taille est égale à XXL
UPDATE vetement v
 JOIN taille t ON v.id_taille = t.id_taille 
SET v.prix_vetement = v.prix_vetement * 0.80 
WHERE t.nom_taille = ‘XXL’ ;


//Augmentation de 5% sur les vetements rouges
UPDATE vetement v
   JOIN couleur c ON v.id_couleur= c.id_couleur  
SET v.prix_vetement = v.prix_vetement * 1.05 
WHERE v.nom_couleur = ‘ROUGE’ ;



2 requêtes impliquant plus de 2 tables:

//Augmentation de 5% sur les vetements rouges et de taille S
UPDATE vetement v
    JOIN couleur c ON v.id_couleur= c.id_couleur  
    JOIN taille t ON v.id_taille = t.id_taille 
	SET v.prix_vetement = v.prix_vetement * 1.05 
	WHERE   c.nom_couleur = ‘ROUGE’
	AND t.nom_taille = ‘S’ ;

//Réduction de 5 pour les vêtements rouges de taille M avec un prix supérieur à 9€
UPDATE vetement v
    JOIN couleur c ON v.id_couleur= c.id_couleur  
    JOIN taille t ON v.id_taille = t.id_taille 
	SET v.prix_vetement = v.prix_vetement -5 
	WHERE v.prix_vetement > 9 
	AND c.nom_couleur = ‘ROUGE’
	AND t.nom_taille = ‘M’ ;


DECRIPTION TEXTUELLES DES REQUETES DE SUPPRESSION

2 requêtes impliquant 1 table:
//Supprimer une ligne de la table vetement (suppression d'un vêtement)
DELETE FROM vetement WHERE id_vetement=1;

//Supprimer la table couleur
DROP TABLE  couleur;

2 requêtes impliquant 2 tables:
// Supprimer toutes les commandes d'un utilisateur
DELETE FROM commande 
	JOIN utilisateur ON utilisateur.id_utilisateur = commande.id_utilisateur 
	WHERE utilisateur.id_utilisateur = 5;

// Supprimer tous les vêtements dont la catégorie est "pantalon"
DELETE FROM vetement
	JOIN categorie ON vetement.id_categorie = categorie.id_categorie
	WHERE categorie.nom_categorie = "pantalon";

2 requêtes impliquant plus de 2 tables:
// Supprimer tous les vêtements dont la catégorie est "t-shirt" et la taille est "XXL"
DELETE FROM vetement
	JOIN categorie ON vetement.id_categorie = categorie.id_categorie
	JOIN taille ON vetement.id_taille = taille.id_taille
	WHERE categorie.nom_categorie = "t-shirt" AND taille.nom_taille = "XXL";

// Supprimer les commandes d'un utilisateur contenant plus de 5 vêtements rouges
DELETE FROM commande
	JOIN est_commandé ON commande.id_commande = est_commandé.id_commande
	JOIN vetement ON est_commandé.id_vetement = vetement.id_vetement
	JOIN couleur ON vetement.id_couleur = couleur.id_couleur
	WHERE COUNT(est_commandé.id_vetement) > 5 AND couleur.nom = "rouge";

DESCRIPTION TEXTUELLES DES REQUETES DE CONSULTATION

5 requêtes impliquant 1 table dont 1 avec un group By et une avec un Order By:

//Trier les vêtements par ordre croissant du prix
SELECT nom, prix 
FROM declinaison_vetement ORDER BY prix; 

//Regrouper les vetements den quantité disponible par couleur
SELECT id_couleur, COUNT(*) 
FROM declinaison_vetement GROUP BY id_couleur 
HAVING quantite>0

ou

SELECT id_couleur, COUNT(*) 
FROM declinaison_vetement 
WHERE quantite>0 GROUP BY id_couleur 

//Filtrer par gamme de prix les vêtements. Ici c'est entre 20 et 40€
SELECT prix, nom_vetement 
FORM vetement
WHERE prix BETWEEN 20 AND 40;

//Lister les vêtements dont le prix est inférieur à 30€.
SELECT prix, nom_vetement 
FROM vetement 
WHERE prix <31;

//Lister les vêtements dont le prix est égale à 30€.
SELECT prix, nom_vetement 
FROM vetement 
WHERE prix = 30;


5 requêtes impliquant 2 tables avec jointures internes dont 1 externe + 1 group by + 1 tri : 

// Donner le prix des commande regroupé par chaque utilisateur (GROUP BY)

SELECT utilisateur.id_utilisateur, SUM(commande.prix_commande) 
FROM utilisateur
JOIN commande ON utilisateur.id_utilisateur = commande.id_utilisateur
GROUP BY utilisateur.id_utilisateur

// Donner la liste d'id des vêtements et leur prix qui ont une couleur couleur rouge. Pour ceux qui n'ont pas de couleur rouge, leur nom sera simplement affiché.

SELECT 	id_vetement, nom_couleur 
FROM déclinaison RIGHT OUTER JOIN couleur ON declinaison.id-couleur = couleur.id_couleur;


// Trier les vêtements par catégorie

5 requêtes impliquant plus de 2 tables avec jointures internes dont 1 externe + 1 group by + 1 tri :










DICTIONNAIRE DE DONNEES MERISE

description textuelles des associations

Nous avons 6 tables dans notre SGBD eshop. Parmis cela, nous avons la table vêtement qui contient les noms, id, descriptions, prix et quantité du vêtement. 
Ces vêtements sont choisis par un utilisateur. Nous avons donc une association Utilisateur -- Choisit -- vetement.
Un utilisateur peut choisir entre 0 à n vêtements.

L'utilisateur, après avoir choisi ses vetements, peut passer une ou plusieurs commandes.

Les vêtements ont aussi des caractéristiques telles qu'une categorie, une taille, une couleur. Nous avons définis pour optimiser la recherche sur le SGBD 1 catégorie, 1 taille et 1 couleur pour 1 vetement.
Une categorie peut avoir plusieurs tailles, de même que plusieurs couleurs. La visualisation des couleurs de vêtement pourra se faire que lorsqu'on filtre les vetements par catégorie ou lorsqu'on applique aucun filtre. Nous partons du principe que pour chercher un vetement d'une certaine taille, il faut chercher par categorie de vêtement.

Si il n'y a plus de vêtements en stock dans la table vetement (caractérisé par son attribut quantite_vetement), des vetements sont commandés pour reapprovisionner le stock.


PACKAGE

Les blocs packages:

CREATE OR REPLACE PACKAGE UTILISATEUR_PACKAGE AS 

FUNCTION UTILISATEURinserer(userId IN number, userLastName IN VARCHAR2, userFirstName IN VARCHAR2, userAddress IN VARCHAR2, userEmail IN VARCHAR2 , userPassword IN VARCHAR2)
return NUMBER ;
--FUNCTION UTILISATEURtotal()
--return NUMBER IS total NUMBER;

PROCEDURE UTILISATEURsupprimer(userId IN number);
PROCEDURE UTILISATEURmodifierMotDePasse(userId IN number, userPassword IN VARCHAR2);
PROCEDURE UTILISATEURmodifierNom(userId IN number, userLastName IN VARCHAR2, userFirstName IN VARCHAR2);
PROCEDURE UTILISATEURlister;
PROCEDURE UTILISATEURdepensesUtilisateurs();
PROCEDURE UTILISATEURCommandeDeclinaison(idDeclinaison IS NUMBER);
PROCEDURE UTILISATEURCommandeAnnulee();


END UTILISATEUR_PACKAGE;

CREATE OR REPLACE PACKAGE COMMANDE_PACKAGE AS 

FUNCTION COMMANDEinserer(commandeId IN number, etatCommande IN VARCHAR2, prixCommande IN number)
return NUMBER ;
PROCEDURE COMMANDEsupprimer(commandeId IN number);
PROCEDURE COMMANDEmodifierPrixCommande(commandeId IN number, prixCommande IN NUMBER);
PROCEDURE COMMANDEmodifierEtatCommande(commandeId IN number, etatCommande IN VARCHAR2);
PROCEDURE COMMANDElister(userId);

END COMMANDE_PACKAGE;


Les packages body:
CREATE OR REPLACE
PACKAGE BODY UTILISATEUR_PACKAGE AS

  FUNCTION UTILISATEURinserer(userId IN number, userLastName IN VARCHAR2, userFirstName IN VARCHAR2, userAddress IN VARCHAR2, userEmail IN VARCHAR2 , userPassword IN VARCHAR2)
return NUMBER  AS
BEGIN
    INSERT INTO UTILISATEUR
     VALUES(userId, userLastName, userFirstName, userAddress, userEmail, userPassword);
	RETURN (userId);
  END UTILISATEURinserer;

END UTILISATEUR_PACKAGE;


--Spécification des traitement avec des packages PLSQL (Modèle de traitements)
--. Choisir parmi vos tables deux d’entres (A et B) elles sur lesquelles les fonctions suivantes 
--vont être spécifiées puis implémentées :


--Sur la table A, définir un package plsql ayant le nom de la dite table:

CREATE OR REPLACE
PACKAGE BODY UTILISATEUR_PACKAGE AS

-- - ajouter une nouvelle occurence à A : fonction Ainserer;

FUNCTION UTILISATEURinserer(userId IN number, userLastName IN VARCHAR2, userFirstName IN VARCHAR2, userAddress IN VARCHAR2, userEmail IN VARCHAR2 , userPassword IN VARCHAR2)
return NUMBER AS
BEGIN
INSERT INTO UTILISATEUR-
VALUES(userId, userLastName, userFirstName, userAddress, userEmail, userPassword);
RETURN (userId);
END UTILISATEURinserer;


-- - supprimer une occurrence à A (Attention : les enregistrements liés dans B doivent 
--aussi être supprimés) : fonction Asupprimer;

PROCEDURE UTILISATEURsupprimer(userId IN number)
BEGIN
DELETE FROM UTILISATEUR
WHERE ID_UTILISATEUR = userId; 
END UTILISATEURsupprimer;


-- - modifier des informations sur de A : fonction AmodifierF1, AmodifierF2 
--(texte requêtes correspondantes plus haut);

PROCEDURE UTILISATEURmodifierMotDePasse(userId IN number, userPassword IN VARCHAR2)
BEGIN
UPDATE UTILISATEUR
SET MDP_UTILISATEUR = userPassword
WHERE ID_UTILISATEUR = userId; 
END UTILISATEURmodifierMotDePasse;

PROCEDURE UTILISATEURmodifierNom(userId IN number, userLastName IN VARCHAR2, userFirstName IN VARCHAR2)
BEGIN
UPDATE UTILISATEUR
SET NOM_UTILISATEUR = userLastName, PRENOM_UTILISATEUR = userFirstName 
WHERE ID_UTILISATEUR = userId; 
END UTILISATEURmodifierNom;


-- - lister toutes les occurrences de A: fonction Alister;

PROCEDURE UTILISATEURlister()
DECLARE
CURSOR user_list IS SELECT *
FROM UTILISATEUR;

userId UTILISATEUR.ID_UTILISATEUR%TYPE;
userLastName UTILISATEUR.NOM_UTILISATEUR%TYPE;
userFirstName UTILISATEUR.PRENOM_UTILISATEUR%TYPE;
userAddress UTILISATEUR.ADRESSE_UTILISATEUR%TYPE;
userEmail UTILISATEUR.EMAIL_UTILISATEUR%TYPE;
userPassword UTILISATEUR.MDP_UTILISATEUR%TYPE;
BEGIN
OPEN user_list;
LOOP
FETCH user_list INTO userId,userLastName,userFirstName,userAddress,userEmail,userPassword;
DBMS_OUTPUT.PUT_LINE(userId || ' - ' || userLastName || ' - ' || userFirstName || ' - ' || userAddress ||' - ' || userEmail ||' - ' || userPassword);
END LOOP;
END UTILISATEURlister;

-- - fournir le nombre total des occurrences de A : fonction Atotal ;

FUNCTION UTILISATEURtotal()
return NUMBER IS total NUMBER;
BEGIN
SELECT COUNT(*) INTO total
FROM UTILISATEUR
RETURN (total);
END UTILISATEURtotal;


-- - Proposer aussi 3 fonctions avec des requêtes de consultation impliquant 2 ou 3 
-- tables au moins (jointure, groupe, tri) : fonction Af1, Af2, Af3. f1, f2, f3 sont
-- des noms à définir AmodifierF2 (texte requêtes correspondantes plus haut);

PROCEDURE UTILISATEURdepensesUtilisateurs()
DECLARE
CURSOR depenseUtilisateur IS 
SELECT UTILISATEUR.NOM_UTILISATEUR, UTILISATEUR.PRENOM_UTILISATEUR, SUM(COMMANDE.PRIX_COMMANDE)
FROM UTILISATEUR 
JOIN COMMANDE ON COMMANDE.ID_UTILISATEUR = UTILISATEUR.ID_UTILISATEUR
GROUP BY UTILISATEUR.ID_UTILISATEUR;

userLastName UTILISATEUR.NOM_UTILISATEUR%TYPE;
userFirstName UTILISATEUR.PRENOM_UTILISATEUR%TYPE;
sommeCommandes COMMANDE.PRIX_COMMANDE%TYPE;

BEGIN
OPEN depenseUtilisateur;
LOOP
FETCH depenseUtilisateur INTO userLastName,userFirstName,sommeCommandes;
DBMS_OUTPUT.PUT_LINE(userLastName || ' - ' || userFirstName || ' : ' || sommeCommandes);
END LOOP;
END UTILISATEURdepensesUtilisateurs;

PROCEDURE UTILISATEURCommandeDeclinaison(idDeclinaison IS NUMBER)
DECLARE
CURSOR user_list IS 
SELECT UTILISATEUR.*
FROM UTILISATEUR
JOIN COMMANDE ON COMMANDE.ID_UTILISATEUR = UTILISATEUR.ID_UTILISATEUR
JOIN EST_COMMANDE ON EST_COMMANDE.ID_COMMANDE = COMMANDE.ID_COMMANDE
WHERE EST_COMMANDE.ID_DECLINAISON = idDeclinaison;

userId UTILISATEUR.ID_UTILISATEUR%TYPE;
userLastName UTILISATEUR.NOM_UTILISATEUR%TYPE;
userFirstName UTILISATEUR.PRENOM_UTILISATEUR%TYPE;
userAddress UTILISATEUR.ADRESSE_UTILISATEUR%TYPE;
userEmail UTILISATEUR.EMAIL_UTILISATEUR%TYPE;
userPassword UTILISATEUR.MDP_UTILISATEUR%TYPE;
BEGIN
OPEN user_list;
LOOP
FETCH user_list INTO userId,userLastName,userFirstName,userAddress,userEmail,userPassword;
DBMS_OUTPUT.PUT_LINE(userId || ' - ' || userLastName || ' - ' || userFirstName || ' - ' || userAddress ||' - ' || userEmail ||' - ' || userPassword);
END LOOP;
END UTILISATEURCommandeDeclinaison;

PROCEDURE UTILISATEURCommandeAnnulee()
DECLARE
CURSOR user_list IS SELECT UTILISATEUR.*
FROM UTILISATEUR
JOIN COMMANDE ON COMMANDE.ID_UTILISATEUR = UTILISATEUR.ID_UTILISATEUR
WHERE COMMANDE.ETAT_COMMANDE = 'Annulee';

userId UTILISATEUR.ID_UTILISATEUR%TYPE;
userLastName UTILISATEUR.NOM_UTILISATEUR%TYPE;
userFirstName UTILISATEUR.PRENOM_UTILISATEUR%TYPE;
userAddress UTILISATEUR.ADRESSE_UTILISATEUR%TYPE;
userEmail UTILISATEUR.EMAIL_UTILISATEUR%TYPE;
userPassword UTILISATEUR.MDP_UTILISATEUR%TYPE;
BEGIN
OPEN user_list;
LOOP
FETCH user_list INTO userId,userLastName,userFirstName,userAddress,userEmail,userPassword;
DBMS_OUTPUT.PUT_LINE(userId || ' - ' || userLastName || ' - ' || userFirstName || ' - ' || userAddress ||' - ' || userEmail ||' - ' || userPassword);
END LOOP;
END UTILISATEURCommandeAnnulee;


END UTILISATEUR_PACKAGE;








--Sur la table B, définir un package plsql ayant le nom de la dite table:
CREATE OR REPLACE PACKAGE UTILISATEUR_PACKAGE AS
FUNCTION COMMANDEinserer(commandeId IN number, etatCommande IN VARCHAR2, prixCommande IN number)
return NUMBER AS
BEGIN
INSERT INTO UTILISATEUR-
VALUES(commandeId, etatCommande, prixCommande);
RETURN (commandeId);
END COMMANDEinserer;

-- supprimer une occurrence à B : fonction Bsupprimer;
PROCEDURE COMMANDEsupprimer(commandeId IN number)
BEGIN
DELETE FROM COMMANDE
WHERE ID_COMMANDE = commandeId; 
END COMMANDEsupprimer;
-- modifier des informations sur de B : fonction BmodifierF1, BmodifierF2

PROCEDURE COMMANDEmodifierPrixCommande(commandeId IN number, prixCommande IN NUMBER)
BEGIN
UPDATE COMMANDE
SET PRIX_COMMANDE = prixCommande
WHERE ID_COMMANDE = commandeId; 
END COMMANDEmodifierPrixCommande;

PROCEDURE COMMANDEmodifierEtatCommande(commandeId IN number, etatCommande IN VARCHAR2)
BEGIN
UPDATE COMMANDE
SET ETAT_COMMANDE = etatCommande 
WHERE ID_COMMANDE = commandeId; 
END COMMANDEmodifierEtatCommande;

- lister toutes les occurrences de B pour une occurrence de A donnée: fonction Blister
--*****************************************
PROCEDURE COMMANDElister(userId)
DECLARE
CURSOR commande_list IS SELECT * // peut être mettre ici une condition de tableau A ?
FROM COMMANDE;

commandeId COMMANDE.ID_COMMANDE%TYPE;
commandeEtatCommande COMMANDE.ETAT_COMMANDE%TYPE;
commandePrixCommande COMMANDE.PRIX_COMMANDE%TYPE;
BEGIN
OPEN commande_list; 
LOOP
FETCH commande_list INTO commandeId, commandeEtatCommande, commandePrixCommande;
If UTILISATEUR.ID_UTILISATEUR =  userId
              DBMS_OUTPUT.PUT_LINE(commandeId || ' - ' || commandeEtatCommande || ' - ' || commandePrixCommande);        
END if ;
END LOOP;
END COMMANDElister;

